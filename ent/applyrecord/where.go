// Code generated by ent, DO NOT EDIT.

package applyrecord

import (
	"kubecit-service/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldLTE(FieldID, id))
}

// Detail applies equality check predicate on the "detail" field. It's identical to DetailEQ.
func Detail(v string) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldEQ(FieldDetail, v))
}

// CurriculumVitae applies equality check predicate on the "curriculum_vitae" field. It's identical to CurriculumVitaeEQ.
func CurriculumVitae(v string) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldEQ(FieldCurriculumVitae, v))
}

// Works applies equality check predicate on the "works" field. It's identical to WorksEQ.
func Works(v string) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldEQ(FieldWorks, v))
}

// Skills applies equality check predicate on the "skills" field. It's identical to SkillsEQ.
func Skills(v string) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldEQ(FieldSkills, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldEQ(FieldName, v))
}

// Level applies equality check predicate on the "level" field. It's identical to LevelEQ.
func Level(v int) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldEQ(FieldLevel, v))
}

// Avatar applies equality check predicate on the "avatar" field. It's identical to AvatarEQ.
func Avatar(v string) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldEQ(FieldAvatar, v))
}

// CreateAt applies equality check predicate on the "create_at" field. It's identical to CreateAtEQ.
func CreateAt(v time.Time) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldEQ(FieldCreateAt, v))
}

// UpdateAt applies equality check predicate on the "update_at" field. It's identical to UpdateAtEQ.
func UpdateAt(v time.Time) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldEQ(FieldUpdateAt, v))
}

// IsPassed applies equality check predicate on the "is_passed" field. It's identical to IsPassedEQ.
func IsPassed(v int8) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldEQ(FieldIsPassed, v))
}

// Messages applies equality check predicate on the "messages" field. It's identical to MessagesEQ.
func Messages(v string) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldEQ(FieldMessages, v))
}

// AuditorID applies equality check predicate on the "auditor_id" field. It's identical to AuditorIDEQ.
func AuditorID(v int) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldEQ(FieldAuditorID, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v int) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldEQ(FieldUserID, v))
}

// DetailEQ applies the EQ predicate on the "detail" field.
func DetailEQ(v string) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldEQ(FieldDetail, v))
}

// DetailNEQ applies the NEQ predicate on the "detail" field.
func DetailNEQ(v string) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldNEQ(FieldDetail, v))
}

// DetailIn applies the In predicate on the "detail" field.
func DetailIn(vs ...string) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldIn(FieldDetail, vs...))
}

// DetailNotIn applies the NotIn predicate on the "detail" field.
func DetailNotIn(vs ...string) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldNotIn(FieldDetail, vs...))
}

// DetailGT applies the GT predicate on the "detail" field.
func DetailGT(v string) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldGT(FieldDetail, v))
}

// DetailGTE applies the GTE predicate on the "detail" field.
func DetailGTE(v string) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldGTE(FieldDetail, v))
}

// DetailLT applies the LT predicate on the "detail" field.
func DetailLT(v string) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldLT(FieldDetail, v))
}

// DetailLTE applies the LTE predicate on the "detail" field.
func DetailLTE(v string) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldLTE(FieldDetail, v))
}

// DetailContains applies the Contains predicate on the "detail" field.
func DetailContains(v string) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldContains(FieldDetail, v))
}

// DetailHasPrefix applies the HasPrefix predicate on the "detail" field.
func DetailHasPrefix(v string) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldHasPrefix(FieldDetail, v))
}

// DetailHasSuffix applies the HasSuffix predicate on the "detail" field.
func DetailHasSuffix(v string) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldHasSuffix(FieldDetail, v))
}

// DetailIsNil applies the IsNil predicate on the "detail" field.
func DetailIsNil() predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldIsNull(FieldDetail))
}

// DetailNotNil applies the NotNil predicate on the "detail" field.
func DetailNotNil() predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldNotNull(FieldDetail))
}

// DetailEqualFold applies the EqualFold predicate on the "detail" field.
func DetailEqualFold(v string) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldEqualFold(FieldDetail, v))
}

// DetailContainsFold applies the ContainsFold predicate on the "detail" field.
func DetailContainsFold(v string) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldContainsFold(FieldDetail, v))
}

// CurriculumVitaeEQ applies the EQ predicate on the "curriculum_vitae" field.
func CurriculumVitaeEQ(v string) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldEQ(FieldCurriculumVitae, v))
}

// CurriculumVitaeNEQ applies the NEQ predicate on the "curriculum_vitae" field.
func CurriculumVitaeNEQ(v string) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldNEQ(FieldCurriculumVitae, v))
}

// CurriculumVitaeIn applies the In predicate on the "curriculum_vitae" field.
func CurriculumVitaeIn(vs ...string) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldIn(FieldCurriculumVitae, vs...))
}

// CurriculumVitaeNotIn applies the NotIn predicate on the "curriculum_vitae" field.
func CurriculumVitaeNotIn(vs ...string) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldNotIn(FieldCurriculumVitae, vs...))
}

// CurriculumVitaeGT applies the GT predicate on the "curriculum_vitae" field.
func CurriculumVitaeGT(v string) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldGT(FieldCurriculumVitae, v))
}

// CurriculumVitaeGTE applies the GTE predicate on the "curriculum_vitae" field.
func CurriculumVitaeGTE(v string) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldGTE(FieldCurriculumVitae, v))
}

// CurriculumVitaeLT applies the LT predicate on the "curriculum_vitae" field.
func CurriculumVitaeLT(v string) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldLT(FieldCurriculumVitae, v))
}

// CurriculumVitaeLTE applies the LTE predicate on the "curriculum_vitae" field.
func CurriculumVitaeLTE(v string) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldLTE(FieldCurriculumVitae, v))
}

// CurriculumVitaeContains applies the Contains predicate on the "curriculum_vitae" field.
func CurriculumVitaeContains(v string) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldContains(FieldCurriculumVitae, v))
}

// CurriculumVitaeHasPrefix applies the HasPrefix predicate on the "curriculum_vitae" field.
func CurriculumVitaeHasPrefix(v string) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldHasPrefix(FieldCurriculumVitae, v))
}

// CurriculumVitaeHasSuffix applies the HasSuffix predicate on the "curriculum_vitae" field.
func CurriculumVitaeHasSuffix(v string) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldHasSuffix(FieldCurriculumVitae, v))
}

// CurriculumVitaeIsNil applies the IsNil predicate on the "curriculum_vitae" field.
func CurriculumVitaeIsNil() predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldIsNull(FieldCurriculumVitae))
}

// CurriculumVitaeNotNil applies the NotNil predicate on the "curriculum_vitae" field.
func CurriculumVitaeNotNil() predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldNotNull(FieldCurriculumVitae))
}

// CurriculumVitaeEqualFold applies the EqualFold predicate on the "curriculum_vitae" field.
func CurriculumVitaeEqualFold(v string) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldEqualFold(FieldCurriculumVitae, v))
}

// CurriculumVitaeContainsFold applies the ContainsFold predicate on the "curriculum_vitae" field.
func CurriculumVitaeContainsFold(v string) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldContainsFold(FieldCurriculumVitae, v))
}

// WorksEQ applies the EQ predicate on the "works" field.
func WorksEQ(v string) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldEQ(FieldWorks, v))
}

// WorksNEQ applies the NEQ predicate on the "works" field.
func WorksNEQ(v string) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldNEQ(FieldWorks, v))
}

// WorksIn applies the In predicate on the "works" field.
func WorksIn(vs ...string) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldIn(FieldWorks, vs...))
}

// WorksNotIn applies the NotIn predicate on the "works" field.
func WorksNotIn(vs ...string) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldNotIn(FieldWorks, vs...))
}

// WorksGT applies the GT predicate on the "works" field.
func WorksGT(v string) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldGT(FieldWorks, v))
}

// WorksGTE applies the GTE predicate on the "works" field.
func WorksGTE(v string) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldGTE(FieldWorks, v))
}

// WorksLT applies the LT predicate on the "works" field.
func WorksLT(v string) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldLT(FieldWorks, v))
}

// WorksLTE applies the LTE predicate on the "works" field.
func WorksLTE(v string) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldLTE(FieldWorks, v))
}

// WorksContains applies the Contains predicate on the "works" field.
func WorksContains(v string) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldContains(FieldWorks, v))
}

// WorksHasPrefix applies the HasPrefix predicate on the "works" field.
func WorksHasPrefix(v string) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldHasPrefix(FieldWorks, v))
}

// WorksHasSuffix applies the HasSuffix predicate on the "works" field.
func WorksHasSuffix(v string) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldHasSuffix(FieldWorks, v))
}

// WorksIsNil applies the IsNil predicate on the "works" field.
func WorksIsNil() predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldIsNull(FieldWorks))
}

// WorksNotNil applies the NotNil predicate on the "works" field.
func WorksNotNil() predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldNotNull(FieldWorks))
}

// WorksEqualFold applies the EqualFold predicate on the "works" field.
func WorksEqualFold(v string) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldEqualFold(FieldWorks, v))
}

// WorksContainsFold applies the ContainsFold predicate on the "works" field.
func WorksContainsFold(v string) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldContainsFold(FieldWorks, v))
}

// SkillsEQ applies the EQ predicate on the "skills" field.
func SkillsEQ(v string) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldEQ(FieldSkills, v))
}

// SkillsNEQ applies the NEQ predicate on the "skills" field.
func SkillsNEQ(v string) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldNEQ(FieldSkills, v))
}

// SkillsIn applies the In predicate on the "skills" field.
func SkillsIn(vs ...string) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldIn(FieldSkills, vs...))
}

// SkillsNotIn applies the NotIn predicate on the "skills" field.
func SkillsNotIn(vs ...string) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldNotIn(FieldSkills, vs...))
}

// SkillsGT applies the GT predicate on the "skills" field.
func SkillsGT(v string) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldGT(FieldSkills, v))
}

// SkillsGTE applies the GTE predicate on the "skills" field.
func SkillsGTE(v string) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldGTE(FieldSkills, v))
}

// SkillsLT applies the LT predicate on the "skills" field.
func SkillsLT(v string) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldLT(FieldSkills, v))
}

// SkillsLTE applies the LTE predicate on the "skills" field.
func SkillsLTE(v string) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldLTE(FieldSkills, v))
}

// SkillsContains applies the Contains predicate on the "skills" field.
func SkillsContains(v string) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldContains(FieldSkills, v))
}

// SkillsHasPrefix applies the HasPrefix predicate on the "skills" field.
func SkillsHasPrefix(v string) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldHasPrefix(FieldSkills, v))
}

// SkillsHasSuffix applies the HasSuffix predicate on the "skills" field.
func SkillsHasSuffix(v string) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldHasSuffix(FieldSkills, v))
}

// SkillsIsNil applies the IsNil predicate on the "skills" field.
func SkillsIsNil() predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldIsNull(FieldSkills))
}

// SkillsNotNil applies the NotNil predicate on the "skills" field.
func SkillsNotNil() predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldNotNull(FieldSkills))
}

// SkillsEqualFold applies the EqualFold predicate on the "skills" field.
func SkillsEqualFold(v string) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldEqualFold(FieldSkills, v))
}

// SkillsContainsFold applies the ContainsFold predicate on the "skills" field.
func SkillsContainsFold(v string) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldContainsFold(FieldSkills, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldContainsFold(FieldName, v))
}

// LevelEQ applies the EQ predicate on the "level" field.
func LevelEQ(v int) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldEQ(FieldLevel, v))
}

// LevelNEQ applies the NEQ predicate on the "level" field.
func LevelNEQ(v int) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldNEQ(FieldLevel, v))
}

// LevelIn applies the In predicate on the "level" field.
func LevelIn(vs ...int) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldIn(FieldLevel, vs...))
}

// LevelNotIn applies the NotIn predicate on the "level" field.
func LevelNotIn(vs ...int) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldNotIn(FieldLevel, vs...))
}

// LevelGT applies the GT predicate on the "level" field.
func LevelGT(v int) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldGT(FieldLevel, v))
}

// LevelGTE applies the GTE predicate on the "level" field.
func LevelGTE(v int) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldGTE(FieldLevel, v))
}

// LevelLT applies the LT predicate on the "level" field.
func LevelLT(v int) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldLT(FieldLevel, v))
}

// LevelLTE applies the LTE predicate on the "level" field.
func LevelLTE(v int) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldLTE(FieldLevel, v))
}

// AvatarEQ applies the EQ predicate on the "avatar" field.
func AvatarEQ(v string) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldEQ(FieldAvatar, v))
}

// AvatarNEQ applies the NEQ predicate on the "avatar" field.
func AvatarNEQ(v string) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldNEQ(FieldAvatar, v))
}

// AvatarIn applies the In predicate on the "avatar" field.
func AvatarIn(vs ...string) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldIn(FieldAvatar, vs...))
}

// AvatarNotIn applies the NotIn predicate on the "avatar" field.
func AvatarNotIn(vs ...string) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldNotIn(FieldAvatar, vs...))
}

// AvatarGT applies the GT predicate on the "avatar" field.
func AvatarGT(v string) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldGT(FieldAvatar, v))
}

// AvatarGTE applies the GTE predicate on the "avatar" field.
func AvatarGTE(v string) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldGTE(FieldAvatar, v))
}

// AvatarLT applies the LT predicate on the "avatar" field.
func AvatarLT(v string) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldLT(FieldAvatar, v))
}

// AvatarLTE applies the LTE predicate on the "avatar" field.
func AvatarLTE(v string) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldLTE(FieldAvatar, v))
}

// AvatarContains applies the Contains predicate on the "avatar" field.
func AvatarContains(v string) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldContains(FieldAvatar, v))
}

// AvatarHasPrefix applies the HasPrefix predicate on the "avatar" field.
func AvatarHasPrefix(v string) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldHasPrefix(FieldAvatar, v))
}

// AvatarHasSuffix applies the HasSuffix predicate on the "avatar" field.
func AvatarHasSuffix(v string) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldHasSuffix(FieldAvatar, v))
}

// AvatarIsNil applies the IsNil predicate on the "avatar" field.
func AvatarIsNil() predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldIsNull(FieldAvatar))
}

// AvatarNotNil applies the NotNil predicate on the "avatar" field.
func AvatarNotNil() predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldNotNull(FieldAvatar))
}

// AvatarEqualFold applies the EqualFold predicate on the "avatar" field.
func AvatarEqualFold(v string) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldEqualFold(FieldAvatar, v))
}

// AvatarContainsFold applies the ContainsFold predicate on the "avatar" field.
func AvatarContainsFold(v string) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldContainsFold(FieldAvatar, v))
}

// CreateAtEQ applies the EQ predicate on the "create_at" field.
func CreateAtEQ(v time.Time) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldEQ(FieldCreateAt, v))
}

// CreateAtNEQ applies the NEQ predicate on the "create_at" field.
func CreateAtNEQ(v time.Time) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldNEQ(FieldCreateAt, v))
}

// CreateAtIn applies the In predicate on the "create_at" field.
func CreateAtIn(vs ...time.Time) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldIn(FieldCreateAt, vs...))
}

// CreateAtNotIn applies the NotIn predicate on the "create_at" field.
func CreateAtNotIn(vs ...time.Time) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldNotIn(FieldCreateAt, vs...))
}

// CreateAtGT applies the GT predicate on the "create_at" field.
func CreateAtGT(v time.Time) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldGT(FieldCreateAt, v))
}

// CreateAtGTE applies the GTE predicate on the "create_at" field.
func CreateAtGTE(v time.Time) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldGTE(FieldCreateAt, v))
}

// CreateAtLT applies the LT predicate on the "create_at" field.
func CreateAtLT(v time.Time) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldLT(FieldCreateAt, v))
}

// CreateAtLTE applies the LTE predicate on the "create_at" field.
func CreateAtLTE(v time.Time) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldLTE(FieldCreateAt, v))
}

// UpdateAtEQ applies the EQ predicate on the "update_at" field.
func UpdateAtEQ(v time.Time) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldEQ(FieldUpdateAt, v))
}

// UpdateAtNEQ applies the NEQ predicate on the "update_at" field.
func UpdateAtNEQ(v time.Time) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldNEQ(FieldUpdateAt, v))
}

// UpdateAtIn applies the In predicate on the "update_at" field.
func UpdateAtIn(vs ...time.Time) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldIn(FieldUpdateAt, vs...))
}

// UpdateAtNotIn applies the NotIn predicate on the "update_at" field.
func UpdateAtNotIn(vs ...time.Time) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldNotIn(FieldUpdateAt, vs...))
}

// UpdateAtGT applies the GT predicate on the "update_at" field.
func UpdateAtGT(v time.Time) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldGT(FieldUpdateAt, v))
}

// UpdateAtGTE applies the GTE predicate on the "update_at" field.
func UpdateAtGTE(v time.Time) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldGTE(FieldUpdateAt, v))
}

// UpdateAtLT applies the LT predicate on the "update_at" field.
func UpdateAtLT(v time.Time) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldLT(FieldUpdateAt, v))
}

// UpdateAtLTE applies the LTE predicate on the "update_at" field.
func UpdateAtLTE(v time.Time) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldLTE(FieldUpdateAt, v))
}

// IsPassedEQ applies the EQ predicate on the "is_passed" field.
func IsPassedEQ(v int8) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldEQ(FieldIsPassed, v))
}

// IsPassedNEQ applies the NEQ predicate on the "is_passed" field.
func IsPassedNEQ(v int8) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldNEQ(FieldIsPassed, v))
}

// IsPassedIn applies the In predicate on the "is_passed" field.
func IsPassedIn(vs ...int8) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldIn(FieldIsPassed, vs...))
}

// IsPassedNotIn applies the NotIn predicate on the "is_passed" field.
func IsPassedNotIn(vs ...int8) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldNotIn(FieldIsPassed, vs...))
}

// IsPassedGT applies the GT predicate on the "is_passed" field.
func IsPassedGT(v int8) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldGT(FieldIsPassed, v))
}

// IsPassedGTE applies the GTE predicate on the "is_passed" field.
func IsPassedGTE(v int8) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldGTE(FieldIsPassed, v))
}

// IsPassedLT applies the LT predicate on the "is_passed" field.
func IsPassedLT(v int8) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldLT(FieldIsPassed, v))
}

// IsPassedLTE applies the LTE predicate on the "is_passed" field.
func IsPassedLTE(v int8) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldLTE(FieldIsPassed, v))
}

// MessagesEQ applies the EQ predicate on the "messages" field.
func MessagesEQ(v string) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldEQ(FieldMessages, v))
}

// MessagesNEQ applies the NEQ predicate on the "messages" field.
func MessagesNEQ(v string) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldNEQ(FieldMessages, v))
}

// MessagesIn applies the In predicate on the "messages" field.
func MessagesIn(vs ...string) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldIn(FieldMessages, vs...))
}

// MessagesNotIn applies the NotIn predicate on the "messages" field.
func MessagesNotIn(vs ...string) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldNotIn(FieldMessages, vs...))
}

// MessagesGT applies the GT predicate on the "messages" field.
func MessagesGT(v string) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldGT(FieldMessages, v))
}

// MessagesGTE applies the GTE predicate on the "messages" field.
func MessagesGTE(v string) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldGTE(FieldMessages, v))
}

// MessagesLT applies the LT predicate on the "messages" field.
func MessagesLT(v string) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldLT(FieldMessages, v))
}

// MessagesLTE applies the LTE predicate on the "messages" field.
func MessagesLTE(v string) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldLTE(FieldMessages, v))
}

// MessagesContains applies the Contains predicate on the "messages" field.
func MessagesContains(v string) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldContains(FieldMessages, v))
}

// MessagesHasPrefix applies the HasPrefix predicate on the "messages" field.
func MessagesHasPrefix(v string) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldHasPrefix(FieldMessages, v))
}

// MessagesHasSuffix applies the HasSuffix predicate on the "messages" field.
func MessagesHasSuffix(v string) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldHasSuffix(FieldMessages, v))
}

// MessagesIsNil applies the IsNil predicate on the "messages" field.
func MessagesIsNil() predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldIsNull(FieldMessages))
}

// MessagesNotNil applies the NotNil predicate on the "messages" field.
func MessagesNotNil() predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldNotNull(FieldMessages))
}

// MessagesEqualFold applies the EqualFold predicate on the "messages" field.
func MessagesEqualFold(v string) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldEqualFold(FieldMessages, v))
}

// MessagesContainsFold applies the ContainsFold predicate on the "messages" field.
func MessagesContainsFold(v string) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldContainsFold(FieldMessages, v))
}

// AuditorIDEQ applies the EQ predicate on the "auditor_id" field.
func AuditorIDEQ(v int) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldEQ(FieldAuditorID, v))
}

// AuditorIDNEQ applies the NEQ predicate on the "auditor_id" field.
func AuditorIDNEQ(v int) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldNEQ(FieldAuditorID, v))
}

// AuditorIDIn applies the In predicate on the "auditor_id" field.
func AuditorIDIn(vs ...int) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldIn(FieldAuditorID, vs...))
}

// AuditorIDNotIn applies the NotIn predicate on the "auditor_id" field.
func AuditorIDNotIn(vs ...int) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldNotIn(FieldAuditorID, vs...))
}

// AuditorIDGT applies the GT predicate on the "auditor_id" field.
func AuditorIDGT(v int) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldGT(FieldAuditorID, v))
}

// AuditorIDGTE applies the GTE predicate on the "auditor_id" field.
func AuditorIDGTE(v int) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldGTE(FieldAuditorID, v))
}

// AuditorIDLT applies the LT predicate on the "auditor_id" field.
func AuditorIDLT(v int) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldLT(FieldAuditorID, v))
}

// AuditorIDLTE applies the LTE predicate on the "auditor_id" field.
func AuditorIDLTE(v int) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldLTE(FieldAuditorID, v))
}

// AuditorIDIsNil applies the IsNil predicate on the "auditor_id" field.
func AuditorIDIsNil() predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldIsNull(FieldAuditorID))
}

// AuditorIDNotNil applies the NotNil predicate on the "auditor_id" field.
func AuditorIDNotNil() predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldNotNull(FieldAuditorID))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v int) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v int) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...int) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...int) predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDIsNil applies the IsNil predicate on the "user_id" field.
func UserIDIsNil() predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldIsNull(FieldUserID))
}

// UserIDNotNil applies the NotNil predicate on the "user_id" field.
func UserIDNotNil() predicate.ApplyRecord {
	return predicate.ApplyRecord(sql.FieldNotNull(FieldUserID))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.ApplyRecord {
	return predicate.ApplyRecord(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.ApplyRecord {
	return predicate.ApplyRecord(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ApplyRecord) predicate.ApplyRecord {
	return predicate.ApplyRecord(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ApplyRecord) predicate.ApplyRecord {
	return predicate.ApplyRecord(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ApplyRecord) predicate.ApplyRecord {
	return predicate.ApplyRecord(func(s *sql.Selector) {
		p(s.Not())
	})
}
