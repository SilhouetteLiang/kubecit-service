// Code generated by ent, DO NOT EDIT.

package applyrecord

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the applyrecord type in the database.
	Label = "apply_record"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldDetail holds the string denoting the detail field in the database.
	FieldDetail = "detail"
	// FieldCurriculumVitae holds the string denoting the curriculum_vitae field in the database.
	FieldCurriculumVitae = "curriculum_vitae"
	// FieldWorks holds the string denoting the works field in the database.
	FieldWorks = "works"
	// FieldSkills holds the string denoting the skills field in the database.
	FieldSkills = "skills"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldLevel holds the string denoting the level field in the database.
	FieldLevel = "level"
	// FieldAvatar holds the string denoting the avatar field in the database.
	FieldAvatar = "avatar"
	// FieldCreateAt holds the string denoting the create_at field in the database.
	FieldCreateAt = "create_at"
	// FieldUpdateAt holds the string denoting the update_at field in the database.
	FieldUpdateAt = "update_at"
	// FieldIsPassed holds the string denoting the is_passed field in the database.
	FieldIsPassed = "is_passed"
	// FieldMessages holds the string denoting the messages field in the database.
	FieldMessages = "messages"
	// FieldAuditorID holds the string denoting the auditor_id field in the database.
	FieldAuditorID = "auditor_id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// Table holds the table name of the applyrecord in the database.
	Table = "apply_records"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "apply_records"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_id"
)

// Columns holds all SQL columns for applyrecord fields.
var Columns = []string{
	FieldID,
	FieldDetail,
	FieldCurriculumVitae,
	FieldWorks,
	FieldSkills,
	FieldName,
	FieldLevel,
	FieldAvatar,
	FieldCreateAt,
	FieldUpdateAt,
	FieldIsPassed,
	FieldMessages,
	FieldAuditorID,
	FieldUserID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateAt holds the default value on creation for the "create_at" field.
	DefaultCreateAt func() time.Time
	// DefaultUpdateAt holds the default value on creation for the "update_at" field.
	DefaultUpdateAt func() time.Time
	// UpdateDefaultUpdateAt holds the default value on update for the "update_at" field.
	UpdateDefaultUpdateAt func() time.Time
	// DefaultIsPassed holds the default value on creation for the "is_passed" field.
	DefaultIsPassed int8
)

// OrderOption defines the ordering options for the ApplyRecord queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByDetail orders the results by the detail field.
func ByDetail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDetail, opts...).ToFunc()
}

// ByCurriculumVitae orders the results by the curriculum_vitae field.
func ByCurriculumVitae(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCurriculumVitae, opts...).ToFunc()
}

// ByWorks orders the results by the works field.
func ByWorks(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWorks, opts...).ToFunc()
}

// BySkills orders the results by the skills field.
func BySkills(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSkills, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByLevel orders the results by the level field.
func ByLevel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLevel, opts...).ToFunc()
}

// ByAvatar orders the results by the avatar field.
func ByAvatar(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAvatar, opts...).ToFunc()
}

// ByCreateAt orders the results by the create_at field.
func ByCreateAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateAt, opts...).ToFunc()
}

// ByUpdateAt orders the results by the update_at field.
func ByUpdateAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateAt, opts...).ToFunc()
}

// ByIsPassed orders the results by the is_passed field.
func ByIsPassed(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsPassed, opts...).ToFunc()
}

// ByMessages orders the results by the messages field.
func ByMessages(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMessages, opts...).ToFunc()
}

// ByAuditorID orders the results by the auditor_id field.
func ByAuditorID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAuditorID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
	)
}
