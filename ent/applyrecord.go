// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"kubecit-service/ent/applyrecord"
	"kubecit-service/ent/user"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ApplyRecord is the model entity for the ApplyRecord schema.
type ApplyRecord struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 讲师详情
	Detail string `json:"detail,omitempty"`
	// 履历描述
	CurriculumVitae string `json:"curriculum_vitae,omitempty"`
	// 以往作品
	Works string `json:"works,omitempty"`
	// 技能点
	Skills string `json:"skills,omitempty"`
	// 名字
	Name string `json:"name,omitempty"`
	// 级别
	Level int `json:"level,omitempty"`
	// 头像
	Avatar string `json:"avatar,omitempty"`
	// 创建时间
	CreateAt time.Time `json:"create_at,omitempty"`
	// 更新时间
	UpdateAt time.Time `json:"update_at,omitempty"`
	// 审核结果
	IsPassed int8 `json:"is_passed,omitempty"`
	// 审核人意见
	Messages string `json:"messages,omitempty"`
	// 审核人意见
	AuditorID int `json:"auditor_id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int `json:"user_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ApplyRecordQuery when eager-loading is set.
	Edges        ApplyRecordEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ApplyRecordEdges holds the relations/edges for other nodes in the graph.
type ApplyRecordEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ApplyRecordEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ApplyRecord) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case applyrecord.FieldID, applyrecord.FieldLevel, applyrecord.FieldIsPassed, applyrecord.FieldAuditorID, applyrecord.FieldUserID:
			values[i] = new(sql.NullInt64)
		case applyrecord.FieldDetail, applyrecord.FieldCurriculumVitae, applyrecord.FieldWorks, applyrecord.FieldSkills, applyrecord.FieldName, applyrecord.FieldAvatar, applyrecord.FieldMessages:
			values[i] = new(sql.NullString)
		case applyrecord.FieldCreateAt, applyrecord.FieldUpdateAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ApplyRecord fields.
func (ar *ApplyRecord) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case applyrecord.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ar.ID = int(value.Int64)
		case applyrecord.FieldDetail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field detail", values[i])
			} else if value.Valid {
				ar.Detail = value.String
			}
		case applyrecord.FieldCurriculumVitae:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field curriculum_vitae", values[i])
			} else if value.Valid {
				ar.CurriculumVitae = value.String
			}
		case applyrecord.FieldWorks:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field works", values[i])
			} else if value.Valid {
				ar.Works = value.String
			}
		case applyrecord.FieldSkills:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field skills", values[i])
			} else if value.Valid {
				ar.Skills = value.String
			}
		case applyrecord.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ar.Name = value.String
			}
		case applyrecord.FieldLevel:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field level", values[i])
			} else if value.Valid {
				ar.Level = int(value.Int64)
			}
		case applyrecord.FieldAvatar:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field avatar", values[i])
			} else if value.Valid {
				ar.Avatar = value.String
			}
		case applyrecord.FieldCreateAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_at", values[i])
			} else if value.Valid {
				ar.CreateAt = value.Time
			}
		case applyrecord.FieldUpdateAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_at", values[i])
			} else if value.Valid {
				ar.UpdateAt = value.Time
			}
		case applyrecord.FieldIsPassed:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field is_passed", values[i])
			} else if value.Valid {
				ar.IsPassed = int8(value.Int64)
			}
		case applyrecord.FieldMessages:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field messages", values[i])
			} else if value.Valid {
				ar.Messages = value.String
			}
		case applyrecord.FieldAuditorID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field auditor_id", values[i])
			} else if value.Valid {
				ar.AuditorID = int(value.Int64)
			}
		case applyrecord.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				ar.UserID = int(value.Int64)
			}
		default:
			ar.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ApplyRecord.
// This includes values selected through modifiers, order, etc.
func (ar *ApplyRecord) Value(name string) (ent.Value, error) {
	return ar.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the ApplyRecord entity.
func (ar *ApplyRecord) QueryUser() *UserQuery {
	return NewApplyRecordClient(ar.config).QueryUser(ar)
}

// Update returns a builder for updating this ApplyRecord.
// Note that you need to call ApplyRecord.Unwrap() before calling this method if this ApplyRecord
// was returned from a transaction, and the transaction was committed or rolled back.
func (ar *ApplyRecord) Update() *ApplyRecordUpdateOne {
	return NewApplyRecordClient(ar.config).UpdateOne(ar)
}

// Unwrap unwraps the ApplyRecord entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ar *ApplyRecord) Unwrap() *ApplyRecord {
	_tx, ok := ar.config.driver.(*txDriver)
	if !ok {
		panic("ent: ApplyRecord is not a transactional entity")
	}
	ar.config.driver = _tx.drv
	return ar
}

// String implements the fmt.Stringer.
func (ar *ApplyRecord) String() string {
	var builder strings.Builder
	builder.WriteString("ApplyRecord(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ar.ID))
	builder.WriteString("detail=")
	builder.WriteString(ar.Detail)
	builder.WriteString(", ")
	builder.WriteString("curriculum_vitae=")
	builder.WriteString(ar.CurriculumVitae)
	builder.WriteString(", ")
	builder.WriteString("works=")
	builder.WriteString(ar.Works)
	builder.WriteString(", ")
	builder.WriteString("skills=")
	builder.WriteString(ar.Skills)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(ar.Name)
	builder.WriteString(", ")
	builder.WriteString("level=")
	builder.WriteString(fmt.Sprintf("%v", ar.Level))
	builder.WriteString(", ")
	builder.WriteString("avatar=")
	builder.WriteString(ar.Avatar)
	builder.WriteString(", ")
	builder.WriteString("create_at=")
	builder.WriteString(ar.CreateAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_at=")
	builder.WriteString(ar.UpdateAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("is_passed=")
	builder.WriteString(fmt.Sprintf("%v", ar.IsPassed))
	builder.WriteString(", ")
	builder.WriteString("messages=")
	builder.WriteString(ar.Messages)
	builder.WriteString(", ")
	builder.WriteString("auditor_id=")
	builder.WriteString(fmt.Sprintf("%v", ar.AuditorID))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", ar.UserID))
	builder.WriteByte(')')
	return builder.String()
}

// ApplyRecords is a parsable slice of ApplyRecord.
type ApplyRecords []*ApplyRecord
