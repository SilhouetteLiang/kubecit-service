// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kubecit-service/ent/applyrecord"
	"kubecit-service/ent/user"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ApplyRecordCreate is the builder for creating a ApplyRecord entity.
type ApplyRecordCreate struct {
	config
	mutation *ApplyRecordMutation
	hooks    []Hook
}

// SetDetail sets the "detail" field.
func (arc *ApplyRecordCreate) SetDetail(s string) *ApplyRecordCreate {
	arc.mutation.SetDetail(s)
	return arc
}

// SetNillableDetail sets the "detail" field if the given value is not nil.
func (arc *ApplyRecordCreate) SetNillableDetail(s *string) *ApplyRecordCreate {
	if s != nil {
		arc.SetDetail(*s)
	}
	return arc
}

// SetCurriculumVitae sets the "curriculum_vitae" field.
func (arc *ApplyRecordCreate) SetCurriculumVitae(s string) *ApplyRecordCreate {
	arc.mutation.SetCurriculumVitae(s)
	return arc
}

// SetNillableCurriculumVitae sets the "curriculum_vitae" field if the given value is not nil.
func (arc *ApplyRecordCreate) SetNillableCurriculumVitae(s *string) *ApplyRecordCreate {
	if s != nil {
		arc.SetCurriculumVitae(*s)
	}
	return arc
}

// SetWorks sets the "works" field.
func (arc *ApplyRecordCreate) SetWorks(s string) *ApplyRecordCreate {
	arc.mutation.SetWorks(s)
	return arc
}

// SetNillableWorks sets the "works" field if the given value is not nil.
func (arc *ApplyRecordCreate) SetNillableWorks(s *string) *ApplyRecordCreate {
	if s != nil {
		arc.SetWorks(*s)
	}
	return arc
}

// SetSkills sets the "skills" field.
func (arc *ApplyRecordCreate) SetSkills(s string) *ApplyRecordCreate {
	arc.mutation.SetSkills(s)
	return arc
}

// SetNillableSkills sets the "skills" field if the given value is not nil.
func (arc *ApplyRecordCreate) SetNillableSkills(s *string) *ApplyRecordCreate {
	if s != nil {
		arc.SetSkills(*s)
	}
	return arc
}

// SetName sets the "name" field.
func (arc *ApplyRecordCreate) SetName(s string) *ApplyRecordCreate {
	arc.mutation.SetName(s)
	return arc
}

// SetLevel sets the "level" field.
func (arc *ApplyRecordCreate) SetLevel(i int) *ApplyRecordCreate {
	arc.mutation.SetLevel(i)
	return arc
}

// SetAvatar sets the "avatar" field.
func (arc *ApplyRecordCreate) SetAvatar(s string) *ApplyRecordCreate {
	arc.mutation.SetAvatar(s)
	return arc
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (arc *ApplyRecordCreate) SetNillableAvatar(s *string) *ApplyRecordCreate {
	if s != nil {
		arc.SetAvatar(*s)
	}
	return arc
}

// SetCreateAt sets the "create_at" field.
func (arc *ApplyRecordCreate) SetCreateAt(t time.Time) *ApplyRecordCreate {
	arc.mutation.SetCreateAt(t)
	return arc
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (arc *ApplyRecordCreate) SetNillableCreateAt(t *time.Time) *ApplyRecordCreate {
	if t != nil {
		arc.SetCreateAt(*t)
	}
	return arc
}

// SetUpdateAt sets the "update_at" field.
func (arc *ApplyRecordCreate) SetUpdateAt(t time.Time) *ApplyRecordCreate {
	arc.mutation.SetUpdateAt(t)
	return arc
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (arc *ApplyRecordCreate) SetNillableUpdateAt(t *time.Time) *ApplyRecordCreate {
	if t != nil {
		arc.SetUpdateAt(*t)
	}
	return arc
}

// SetIsPassed sets the "is_passed" field.
func (arc *ApplyRecordCreate) SetIsPassed(i int8) *ApplyRecordCreate {
	arc.mutation.SetIsPassed(i)
	return arc
}

// SetNillableIsPassed sets the "is_passed" field if the given value is not nil.
func (arc *ApplyRecordCreate) SetNillableIsPassed(i *int8) *ApplyRecordCreate {
	if i != nil {
		arc.SetIsPassed(*i)
	}
	return arc
}

// SetMessages sets the "messages" field.
func (arc *ApplyRecordCreate) SetMessages(s string) *ApplyRecordCreate {
	arc.mutation.SetMessages(s)
	return arc
}

// SetNillableMessages sets the "messages" field if the given value is not nil.
func (arc *ApplyRecordCreate) SetNillableMessages(s *string) *ApplyRecordCreate {
	if s != nil {
		arc.SetMessages(*s)
	}
	return arc
}

// SetAuditorID sets the "auditor_id" field.
func (arc *ApplyRecordCreate) SetAuditorID(i int) *ApplyRecordCreate {
	arc.mutation.SetAuditorID(i)
	return arc
}

// SetNillableAuditorID sets the "auditor_id" field if the given value is not nil.
func (arc *ApplyRecordCreate) SetNillableAuditorID(i *int) *ApplyRecordCreate {
	if i != nil {
		arc.SetAuditorID(*i)
	}
	return arc
}

// SetUserID sets the "user_id" field.
func (arc *ApplyRecordCreate) SetUserID(i int) *ApplyRecordCreate {
	arc.mutation.SetUserID(i)
	return arc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (arc *ApplyRecordCreate) SetNillableUserID(i *int) *ApplyRecordCreate {
	if i != nil {
		arc.SetUserID(*i)
	}
	return arc
}

// SetUser sets the "user" edge to the User entity.
func (arc *ApplyRecordCreate) SetUser(u *User) *ApplyRecordCreate {
	return arc.SetUserID(u.ID)
}

// Mutation returns the ApplyRecordMutation object of the builder.
func (arc *ApplyRecordCreate) Mutation() *ApplyRecordMutation {
	return arc.mutation
}

// Save creates the ApplyRecord in the database.
func (arc *ApplyRecordCreate) Save(ctx context.Context) (*ApplyRecord, error) {
	arc.defaults()
	return withHooks(ctx, arc.sqlSave, arc.mutation, arc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (arc *ApplyRecordCreate) SaveX(ctx context.Context) *ApplyRecord {
	v, err := arc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (arc *ApplyRecordCreate) Exec(ctx context.Context) error {
	_, err := arc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (arc *ApplyRecordCreate) ExecX(ctx context.Context) {
	if err := arc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (arc *ApplyRecordCreate) defaults() {
	if _, ok := arc.mutation.CreateAt(); !ok {
		v := applyrecord.DefaultCreateAt()
		arc.mutation.SetCreateAt(v)
	}
	if _, ok := arc.mutation.UpdateAt(); !ok {
		v := applyrecord.DefaultUpdateAt()
		arc.mutation.SetUpdateAt(v)
	}
	if _, ok := arc.mutation.IsPassed(); !ok {
		v := applyrecord.DefaultIsPassed
		arc.mutation.SetIsPassed(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (arc *ApplyRecordCreate) check() error {
	if _, ok := arc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "ApplyRecord.name"`)}
	}
	if _, ok := arc.mutation.Level(); !ok {
		return &ValidationError{Name: "level", err: errors.New(`ent: missing required field "ApplyRecord.level"`)}
	}
	if _, ok := arc.mutation.CreateAt(); !ok {
		return &ValidationError{Name: "create_at", err: errors.New(`ent: missing required field "ApplyRecord.create_at"`)}
	}
	if _, ok := arc.mutation.UpdateAt(); !ok {
		return &ValidationError{Name: "update_at", err: errors.New(`ent: missing required field "ApplyRecord.update_at"`)}
	}
	if _, ok := arc.mutation.IsPassed(); !ok {
		return &ValidationError{Name: "is_passed", err: errors.New(`ent: missing required field "ApplyRecord.is_passed"`)}
	}
	return nil
}

func (arc *ApplyRecordCreate) sqlSave(ctx context.Context) (*ApplyRecord, error) {
	if err := arc.check(); err != nil {
		return nil, err
	}
	_node, _spec := arc.createSpec()
	if err := sqlgraph.CreateNode(ctx, arc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	arc.mutation.id = &_node.ID
	arc.mutation.done = true
	return _node, nil
}

func (arc *ApplyRecordCreate) createSpec() (*ApplyRecord, *sqlgraph.CreateSpec) {
	var (
		_node = &ApplyRecord{config: arc.config}
		_spec = sqlgraph.NewCreateSpec(applyrecord.Table, sqlgraph.NewFieldSpec(applyrecord.FieldID, field.TypeInt))
	)
	if value, ok := arc.mutation.Detail(); ok {
		_spec.SetField(applyrecord.FieldDetail, field.TypeString, value)
		_node.Detail = value
	}
	if value, ok := arc.mutation.CurriculumVitae(); ok {
		_spec.SetField(applyrecord.FieldCurriculumVitae, field.TypeString, value)
		_node.CurriculumVitae = value
	}
	if value, ok := arc.mutation.Works(); ok {
		_spec.SetField(applyrecord.FieldWorks, field.TypeString, value)
		_node.Works = value
	}
	if value, ok := arc.mutation.Skills(); ok {
		_spec.SetField(applyrecord.FieldSkills, field.TypeString, value)
		_node.Skills = value
	}
	if value, ok := arc.mutation.Name(); ok {
		_spec.SetField(applyrecord.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := arc.mutation.Level(); ok {
		_spec.SetField(applyrecord.FieldLevel, field.TypeInt, value)
		_node.Level = value
	}
	if value, ok := arc.mutation.Avatar(); ok {
		_spec.SetField(applyrecord.FieldAvatar, field.TypeString, value)
		_node.Avatar = value
	}
	if value, ok := arc.mutation.CreateAt(); ok {
		_spec.SetField(applyrecord.FieldCreateAt, field.TypeTime, value)
		_node.CreateAt = value
	}
	if value, ok := arc.mutation.UpdateAt(); ok {
		_spec.SetField(applyrecord.FieldUpdateAt, field.TypeTime, value)
		_node.UpdateAt = value
	}
	if value, ok := arc.mutation.IsPassed(); ok {
		_spec.SetField(applyrecord.FieldIsPassed, field.TypeInt8, value)
		_node.IsPassed = value
	}
	if value, ok := arc.mutation.Messages(); ok {
		_spec.SetField(applyrecord.FieldMessages, field.TypeString, value)
		_node.Messages = value
	}
	if value, ok := arc.mutation.AuditorID(); ok {
		_spec.SetField(applyrecord.FieldAuditorID, field.TypeInt, value)
		_node.AuditorID = value
	}
	if nodes := arc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   applyrecord.UserTable,
			Columns: []string{applyrecord.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ApplyRecordCreateBulk is the builder for creating many ApplyRecord entities in bulk.
type ApplyRecordCreateBulk struct {
	config
	builders []*ApplyRecordCreate
}

// Save creates the ApplyRecord entities in the database.
func (arcb *ApplyRecordCreateBulk) Save(ctx context.Context) ([]*ApplyRecord, error) {
	specs := make([]*sqlgraph.CreateSpec, len(arcb.builders))
	nodes := make([]*ApplyRecord, len(arcb.builders))
	mutators := make([]Mutator, len(arcb.builders))
	for i := range arcb.builders {
		func(i int, root context.Context) {
			builder := arcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ApplyRecordMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, arcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, arcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, arcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (arcb *ApplyRecordCreateBulk) SaveX(ctx context.Context) []*ApplyRecord {
	v, err := arcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (arcb *ApplyRecordCreateBulk) Exec(ctx context.Context) error {
	_, err := arcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (arcb *ApplyRecordCreateBulk) ExecX(ctx context.Context) {
	if err := arcb.Exec(ctx); err != nil {
		panic(err)
	}
}
