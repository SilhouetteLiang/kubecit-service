// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kubecit-service/ent/applyrecord"
	"kubecit-service/ent/predicate"
	"kubecit-service/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ApplyRecordUpdate is the builder for updating ApplyRecord entities.
type ApplyRecordUpdate struct {
	config
	hooks    []Hook
	mutation *ApplyRecordMutation
}

// Where appends a list predicates to the ApplyRecordUpdate builder.
func (aru *ApplyRecordUpdate) Where(ps ...predicate.ApplyRecord) *ApplyRecordUpdate {
	aru.mutation.Where(ps...)
	return aru
}

// SetDetail sets the "detail" field.
func (aru *ApplyRecordUpdate) SetDetail(s string) *ApplyRecordUpdate {
	aru.mutation.SetDetail(s)
	return aru
}

// SetNillableDetail sets the "detail" field if the given value is not nil.
func (aru *ApplyRecordUpdate) SetNillableDetail(s *string) *ApplyRecordUpdate {
	if s != nil {
		aru.SetDetail(*s)
	}
	return aru
}

// ClearDetail clears the value of the "detail" field.
func (aru *ApplyRecordUpdate) ClearDetail() *ApplyRecordUpdate {
	aru.mutation.ClearDetail()
	return aru
}

// SetCurriculumVitae sets the "curriculum_vitae" field.
func (aru *ApplyRecordUpdate) SetCurriculumVitae(s string) *ApplyRecordUpdate {
	aru.mutation.SetCurriculumVitae(s)
	return aru
}

// SetNillableCurriculumVitae sets the "curriculum_vitae" field if the given value is not nil.
func (aru *ApplyRecordUpdate) SetNillableCurriculumVitae(s *string) *ApplyRecordUpdate {
	if s != nil {
		aru.SetCurriculumVitae(*s)
	}
	return aru
}

// ClearCurriculumVitae clears the value of the "curriculum_vitae" field.
func (aru *ApplyRecordUpdate) ClearCurriculumVitae() *ApplyRecordUpdate {
	aru.mutation.ClearCurriculumVitae()
	return aru
}

// SetWorks sets the "works" field.
func (aru *ApplyRecordUpdate) SetWorks(s string) *ApplyRecordUpdate {
	aru.mutation.SetWorks(s)
	return aru
}

// SetNillableWorks sets the "works" field if the given value is not nil.
func (aru *ApplyRecordUpdate) SetNillableWorks(s *string) *ApplyRecordUpdate {
	if s != nil {
		aru.SetWorks(*s)
	}
	return aru
}

// ClearWorks clears the value of the "works" field.
func (aru *ApplyRecordUpdate) ClearWorks() *ApplyRecordUpdate {
	aru.mutation.ClearWorks()
	return aru
}

// SetSkills sets the "skills" field.
func (aru *ApplyRecordUpdate) SetSkills(s string) *ApplyRecordUpdate {
	aru.mutation.SetSkills(s)
	return aru
}

// SetNillableSkills sets the "skills" field if the given value is not nil.
func (aru *ApplyRecordUpdate) SetNillableSkills(s *string) *ApplyRecordUpdate {
	if s != nil {
		aru.SetSkills(*s)
	}
	return aru
}

// ClearSkills clears the value of the "skills" field.
func (aru *ApplyRecordUpdate) ClearSkills() *ApplyRecordUpdate {
	aru.mutation.ClearSkills()
	return aru
}

// SetName sets the "name" field.
func (aru *ApplyRecordUpdate) SetName(s string) *ApplyRecordUpdate {
	aru.mutation.SetName(s)
	return aru
}

// SetLevel sets the "level" field.
func (aru *ApplyRecordUpdate) SetLevel(i int) *ApplyRecordUpdate {
	aru.mutation.ResetLevel()
	aru.mutation.SetLevel(i)
	return aru
}

// AddLevel adds i to the "level" field.
func (aru *ApplyRecordUpdate) AddLevel(i int) *ApplyRecordUpdate {
	aru.mutation.AddLevel(i)
	return aru
}

// SetAvatar sets the "avatar" field.
func (aru *ApplyRecordUpdate) SetAvatar(s string) *ApplyRecordUpdate {
	aru.mutation.SetAvatar(s)
	return aru
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (aru *ApplyRecordUpdate) SetNillableAvatar(s *string) *ApplyRecordUpdate {
	if s != nil {
		aru.SetAvatar(*s)
	}
	return aru
}

// ClearAvatar clears the value of the "avatar" field.
func (aru *ApplyRecordUpdate) ClearAvatar() *ApplyRecordUpdate {
	aru.mutation.ClearAvatar()
	return aru
}

// SetCreateAt sets the "create_at" field.
func (aru *ApplyRecordUpdate) SetCreateAt(t time.Time) *ApplyRecordUpdate {
	aru.mutation.SetCreateAt(t)
	return aru
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (aru *ApplyRecordUpdate) SetNillableCreateAt(t *time.Time) *ApplyRecordUpdate {
	if t != nil {
		aru.SetCreateAt(*t)
	}
	return aru
}

// SetUpdateAt sets the "update_at" field.
func (aru *ApplyRecordUpdate) SetUpdateAt(t time.Time) *ApplyRecordUpdate {
	aru.mutation.SetUpdateAt(t)
	return aru
}

// SetIsPassed sets the "is_passed" field.
func (aru *ApplyRecordUpdate) SetIsPassed(i int8) *ApplyRecordUpdate {
	aru.mutation.ResetIsPassed()
	aru.mutation.SetIsPassed(i)
	return aru
}

// SetNillableIsPassed sets the "is_passed" field if the given value is not nil.
func (aru *ApplyRecordUpdate) SetNillableIsPassed(i *int8) *ApplyRecordUpdate {
	if i != nil {
		aru.SetIsPassed(*i)
	}
	return aru
}

// AddIsPassed adds i to the "is_passed" field.
func (aru *ApplyRecordUpdate) AddIsPassed(i int8) *ApplyRecordUpdate {
	aru.mutation.AddIsPassed(i)
	return aru
}

// SetMessages sets the "messages" field.
func (aru *ApplyRecordUpdate) SetMessages(s string) *ApplyRecordUpdate {
	aru.mutation.SetMessages(s)
	return aru
}

// SetNillableMessages sets the "messages" field if the given value is not nil.
func (aru *ApplyRecordUpdate) SetNillableMessages(s *string) *ApplyRecordUpdate {
	if s != nil {
		aru.SetMessages(*s)
	}
	return aru
}

// ClearMessages clears the value of the "messages" field.
func (aru *ApplyRecordUpdate) ClearMessages() *ApplyRecordUpdate {
	aru.mutation.ClearMessages()
	return aru
}

// SetAuditorID sets the "auditor_id" field.
func (aru *ApplyRecordUpdate) SetAuditorID(i int) *ApplyRecordUpdate {
	aru.mutation.ResetAuditorID()
	aru.mutation.SetAuditorID(i)
	return aru
}

// SetNillableAuditorID sets the "auditor_id" field if the given value is not nil.
func (aru *ApplyRecordUpdate) SetNillableAuditorID(i *int) *ApplyRecordUpdate {
	if i != nil {
		aru.SetAuditorID(*i)
	}
	return aru
}

// AddAuditorID adds i to the "auditor_id" field.
func (aru *ApplyRecordUpdate) AddAuditorID(i int) *ApplyRecordUpdate {
	aru.mutation.AddAuditorID(i)
	return aru
}

// ClearAuditorID clears the value of the "auditor_id" field.
func (aru *ApplyRecordUpdate) ClearAuditorID() *ApplyRecordUpdate {
	aru.mutation.ClearAuditorID()
	return aru
}

// SetUserID sets the "user_id" field.
func (aru *ApplyRecordUpdate) SetUserID(i int) *ApplyRecordUpdate {
	aru.mutation.SetUserID(i)
	return aru
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (aru *ApplyRecordUpdate) SetNillableUserID(i *int) *ApplyRecordUpdate {
	if i != nil {
		aru.SetUserID(*i)
	}
	return aru
}

// ClearUserID clears the value of the "user_id" field.
func (aru *ApplyRecordUpdate) ClearUserID() *ApplyRecordUpdate {
	aru.mutation.ClearUserID()
	return aru
}

// SetUser sets the "user" edge to the User entity.
func (aru *ApplyRecordUpdate) SetUser(u *User) *ApplyRecordUpdate {
	return aru.SetUserID(u.ID)
}

// Mutation returns the ApplyRecordMutation object of the builder.
func (aru *ApplyRecordUpdate) Mutation() *ApplyRecordMutation {
	return aru.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (aru *ApplyRecordUpdate) ClearUser() *ApplyRecordUpdate {
	aru.mutation.ClearUser()
	return aru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (aru *ApplyRecordUpdate) Save(ctx context.Context) (int, error) {
	aru.defaults()
	return withHooks(ctx, aru.sqlSave, aru.mutation, aru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aru *ApplyRecordUpdate) SaveX(ctx context.Context) int {
	affected, err := aru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (aru *ApplyRecordUpdate) Exec(ctx context.Context) error {
	_, err := aru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aru *ApplyRecordUpdate) ExecX(ctx context.Context) {
	if err := aru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aru *ApplyRecordUpdate) defaults() {
	if _, ok := aru.mutation.UpdateAt(); !ok {
		v := applyrecord.UpdateDefaultUpdateAt()
		aru.mutation.SetUpdateAt(v)
	}
}

func (aru *ApplyRecordUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(applyrecord.Table, applyrecord.Columns, sqlgraph.NewFieldSpec(applyrecord.FieldID, field.TypeInt))
	if ps := aru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aru.mutation.Detail(); ok {
		_spec.SetField(applyrecord.FieldDetail, field.TypeString, value)
	}
	if aru.mutation.DetailCleared() {
		_spec.ClearField(applyrecord.FieldDetail, field.TypeString)
	}
	if value, ok := aru.mutation.CurriculumVitae(); ok {
		_spec.SetField(applyrecord.FieldCurriculumVitae, field.TypeString, value)
	}
	if aru.mutation.CurriculumVitaeCleared() {
		_spec.ClearField(applyrecord.FieldCurriculumVitae, field.TypeString)
	}
	if value, ok := aru.mutation.Works(); ok {
		_spec.SetField(applyrecord.FieldWorks, field.TypeString, value)
	}
	if aru.mutation.WorksCleared() {
		_spec.ClearField(applyrecord.FieldWorks, field.TypeString)
	}
	if value, ok := aru.mutation.Skills(); ok {
		_spec.SetField(applyrecord.FieldSkills, field.TypeString, value)
	}
	if aru.mutation.SkillsCleared() {
		_spec.ClearField(applyrecord.FieldSkills, field.TypeString)
	}
	if value, ok := aru.mutation.Name(); ok {
		_spec.SetField(applyrecord.FieldName, field.TypeString, value)
	}
	if value, ok := aru.mutation.Level(); ok {
		_spec.SetField(applyrecord.FieldLevel, field.TypeInt, value)
	}
	if value, ok := aru.mutation.AddedLevel(); ok {
		_spec.AddField(applyrecord.FieldLevel, field.TypeInt, value)
	}
	if value, ok := aru.mutation.Avatar(); ok {
		_spec.SetField(applyrecord.FieldAvatar, field.TypeString, value)
	}
	if aru.mutation.AvatarCleared() {
		_spec.ClearField(applyrecord.FieldAvatar, field.TypeString)
	}
	if value, ok := aru.mutation.CreateAt(); ok {
		_spec.SetField(applyrecord.FieldCreateAt, field.TypeTime, value)
	}
	if value, ok := aru.mutation.UpdateAt(); ok {
		_spec.SetField(applyrecord.FieldUpdateAt, field.TypeTime, value)
	}
	if value, ok := aru.mutation.IsPassed(); ok {
		_spec.SetField(applyrecord.FieldIsPassed, field.TypeInt8, value)
	}
	if value, ok := aru.mutation.AddedIsPassed(); ok {
		_spec.AddField(applyrecord.FieldIsPassed, field.TypeInt8, value)
	}
	if value, ok := aru.mutation.Messages(); ok {
		_spec.SetField(applyrecord.FieldMessages, field.TypeString, value)
	}
	if aru.mutation.MessagesCleared() {
		_spec.ClearField(applyrecord.FieldMessages, field.TypeString)
	}
	if value, ok := aru.mutation.AuditorID(); ok {
		_spec.SetField(applyrecord.FieldAuditorID, field.TypeInt, value)
	}
	if value, ok := aru.mutation.AddedAuditorID(); ok {
		_spec.AddField(applyrecord.FieldAuditorID, field.TypeInt, value)
	}
	if aru.mutation.AuditorIDCleared() {
		_spec.ClearField(applyrecord.FieldAuditorID, field.TypeInt)
	}
	if aru.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   applyrecord.UserTable,
			Columns: []string{applyrecord.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aru.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   applyrecord.UserTable,
			Columns: []string{applyrecord.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, aru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{applyrecord.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	aru.mutation.done = true
	return n, nil
}

// ApplyRecordUpdateOne is the builder for updating a single ApplyRecord entity.
type ApplyRecordUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ApplyRecordMutation
}

// SetDetail sets the "detail" field.
func (aruo *ApplyRecordUpdateOne) SetDetail(s string) *ApplyRecordUpdateOne {
	aruo.mutation.SetDetail(s)
	return aruo
}

// SetNillableDetail sets the "detail" field if the given value is not nil.
func (aruo *ApplyRecordUpdateOne) SetNillableDetail(s *string) *ApplyRecordUpdateOne {
	if s != nil {
		aruo.SetDetail(*s)
	}
	return aruo
}

// ClearDetail clears the value of the "detail" field.
func (aruo *ApplyRecordUpdateOne) ClearDetail() *ApplyRecordUpdateOne {
	aruo.mutation.ClearDetail()
	return aruo
}

// SetCurriculumVitae sets the "curriculum_vitae" field.
func (aruo *ApplyRecordUpdateOne) SetCurriculumVitae(s string) *ApplyRecordUpdateOne {
	aruo.mutation.SetCurriculumVitae(s)
	return aruo
}

// SetNillableCurriculumVitae sets the "curriculum_vitae" field if the given value is not nil.
func (aruo *ApplyRecordUpdateOne) SetNillableCurriculumVitae(s *string) *ApplyRecordUpdateOne {
	if s != nil {
		aruo.SetCurriculumVitae(*s)
	}
	return aruo
}

// ClearCurriculumVitae clears the value of the "curriculum_vitae" field.
func (aruo *ApplyRecordUpdateOne) ClearCurriculumVitae() *ApplyRecordUpdateOne {
	aruo.mutation.ClearCurriculumVitae()
	return aruo
}

// SetWorks sets the "works" field.
func (aruo *ApplyRecordUpdateOne) SetWorks(s string) *ApplyRecordUpdateOne {
	aruo.mutation.SetWorks(s)
	return aruo
}

// SetNillableWorks sets the "works" field if the given value is not nil.
func (aruo *ApplyRecordUpdateOne) SetNillableWorks(s *string) *ApplyRecordUpdateOne {
	if s != nil {
		aruo.SetWorks(*s)
	}
	return aruo
}

// ClearWorks clears the value of the "works" field.
func (aruo *ApplyRecordUpdateOne) ClearWorks() *ApplyRecordUpdateOne {
	aruo.mutation.ClearWorks()
	return aruo
}

// SetSkills sets the "skills" field.
func (aruo *ApplyRecordUpdateOne) SetSkills(s string) *ApplyRecordUpdateOne {
	aruo.mutation.SetSkills(s)
	return aruo
}

// SetNillableSkills sets the "skills" field if the given value is not nil.
func (aruo *ApplyRecordUpdateOne) SetNillableSkills(s *string) *ApplyRecordUpdateOne {
	if s != nil {
		aruo.SetSkills(*s)
	}
	return aruo
}

// ClearSkills clears the value of the "skills" field.
func (aruo *ApplyRecordUpdateOne) ClearSkills() *ApplyRecordUpdateOne {
	aruo.mutation.ClearSkills()
	return aruo
}

// SetName sets the "name" field.
func (aruo *ApplyRecordUpdateOne) SetName(s string) *ApplyRecordUpdateOne {
	aruo.mutation.SetName(s)
	return aruo
}

// SetLevel sets the "level" field.
func (aruo *ApplyRecordUpdateOne) SetLevel(i int) *ApplyRecordUpdateOne {
	aruo.mutation.ResetLevel()
	aruo.mutation.SetLevel(i)
	return aruo
}

// AddLevel adds i to the "level" field.
func (aruo *ApplyRecordUpdateOne) AddLevel(i int) *ApplyRecordUpdateOne {
	aruo.mutation.AddLevel(i)
	return aruo
}

// SetAvatar sets the "avatar" field.
func (aruo *ApplyRecordUpdateOne) SetAvatar(s string) *ApplyRecordUpdateOne {
	aruo.mutation.SetAvatar(s)
	return aruo
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (aruo *ApplyRecordUpdateOne) SetNillableAvatar(s *string) *ApplyRecordUpdateOne {
	if s != nil {
		aruo.SetAvatar(*s)
	}
	return aruo
}

// ClearAvatar clears the value of the "avatar" field.
func (aruo *ApplyRecordUpdateOne) ClearAvatar() *ApplyRecordUpdateOne {
	aruo.mutation.ClearAvatar()
	return aruo
}

// SetCreateAt sets the "create_at" field.
func (aruo *ApplyRecordUpdateOne) SetCreateAt(t time.Time) *ApplyRecordUpdateOne {
	aruo.mutation.SetCreateAt(t)
	return aruo
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (aruo *ApplyRecordUpdateOne) SetNillableCreateAt(t *time.Time) *ApplyRecordUpdateOne {
	if t != nil {
		aruo.SetCreateAt(*t)
	}
	return aruo
}

// SetUpdateAt sets the "update_at" field.
func (aruo *ApplyRecordUpdateOne) SetUpdateAt(t time.Time) *ApplyRecordUpdateOne {
	aruo.mutation.SetUpdateAt(t)
	return aruo
}

// SetIsPassed sets the "is_passed" field.
func (aruo *ApplyRecordUpdateOne) SetIsPassed(i int8) *ApplyRecordUpdateOne {
	aruo.mutation.ResetIsPassed()
	aruo.mutation.SetIsPassed(i)
	return aruo
}

// SetNillableIsPassed sets the "is_passed" field if the given value is not nil.
func (aruo *ApplyRecordUpdateOne) SetNillableIsPassed(i *int8) *ApplyRecordUpdateOne {
	if i != nil {
		aruo.SetIsPassed(*i)
	}
	return aruo
}

// AddIsPassed adds i to the "is_passed" field.
func (aruo *ApplyRecordUpdateOne) AddIsPassed(i int8) *ApplyRecordUpdateOne {
	aruo.mutation.AddIsPassed(i)
	return aruo
}

// SetMessages sets the "messages" field.
func (aruo *ApplyRecordUpdateOne) SetMessages(s string) *ApplyRecordUpdateOne {
	aruo.mutation.SetMessages(s)
	return aruo
}

// SetNillableMessages sets the "messages" field if the given value is not nil.
func (aruo *ApplyRecordUpdateOne) SetNillableMessages(s *string) *ApplyRecordUpdateOne {
	if s != nil {
		aruo.SetMessages(*s)
	}
	return aruo
}

// ClearMessages clears the value of the "messages" field.
func (aruo *ApplyRecordUpdateOne) ClearMessages() *ApplyRecordUpdateOne {
	aruo.mutation.ClearMessages()
	return aruo
}

// SetAuditorID sets the "auditor_id" field.
func (aruo *ApplyRecordUpdateOne) SetAuditorID(i int) *ApplyRecordUpdateOne {
	aruo.mutation.ResetAuditorID()
	aruo.mutation.SetAuditorID(i)
	return aruo
}

// SetNillableAuditorID sets the "auditor_id" field if the given value is not nil.
func (aruo *ApplyRecordUpdateOne) SetNillableAuditorID(i *int) *ApplyRecordUpdateOne {
	if i != nil {
		aruo.SetAuditorID(*i)
	}
	return aruo
}

// AddAuditorID adds i to the "auditor_id" field.
func (aruo *ApplyRecordUpdateOne) AddAuditorID(i int) *ApplyRecordUpdateOne {
	aruo.mutation.AddAuditorID(i)
	return aruo
}

// ClearAuditorID clears the value of the "auditor_id" field.
func (aruo *ApplyRecordUpdateOne) ClearAuditorID() *ApplyRecordUpdateOne {
	aruo.mutation.ClearAuditorID()
	return aruo
}

// SetUserID sets the "user_id" field.
func (aruo *ApplyRecordUpdateOne) SetUserID(i int) *ApplyRecordUpdateOne {
	aruo.mutation.SetUserID(i)
	return aruo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (aruo *ApplyRecordUpdateOne) SetNillableUserID(i *int) *ApplyRecordUpdateOne {
	if i != nil {
		aruo.SetUserID(*i)
	}
	return aruo
}

// ClearUserID clears the value of the "user_id" field.
func (aruo *ApplyRecordUpdateOne) ClearUserID() *ApplyRecordUpdateOne {
	aruo.mutation.ClearUserID()
	return aruo
}

// SetUser sets the "user" edge to the User entity.
func (aruo *ApplyRecordUpdateOne) SetUser(u *User) *ApplyRecordUpdateOne {
	return aruo.SetUserID(u.ID)
}

// Mutation returns the ApplyRecordMutation object of the builder.
func (aruo *ApplyRecordUpdateOne) Mutation() *ApplyRecordMutation {
	return aruo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (aruo *ApplyRecordUpdateOne) ClearUser() *ApplyRecordUpdateOne {
	aruo.mutation.ClearUser()
	return aruo
}

// Where appends a list predicates to the ApplyRecordUpdate builder.
func (aruo *ApplyRecordUpdateOne) Where(ps ...predicate.ApplyRecord) *ApplyRecordUpdateOne {
	aruo.mutation.Where(ps...)
	return aruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (aruo *ApplyRecordUpdateOne) Select(field string, fields ...string) *ApplyRecordUpdateOne {
	aruo.fields = append([]string{field}, fields...)
	return aruo
}

// Save executes the query and returns the updated ApplyRecord entity.
func (aruo *ApplyRecordUpdateOne) Save(ctx context.Context) (*ApplyRecord, error) {
	aruo.defaults()
	return withHooks(ctx, aruo.sqlSave, aruo.mutation, aruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aruo *ApplyRecordUpdateOne) SaveX(ctx context.Context) *ApplyRecord {
	node, err := aruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aruo *ApplyRecordUpdateOne) Exec(ctx context.Context) error {
	_, err := aruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aruo *ApplyRecordUpdateOne) ExecX(ctx context.Context) {
	if err := aruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aruo *ApplyRecordUpdateOne) defaults() {
	if _, ok := aruo.mutation.UpdateAt(); !ok {
		v := applyrecord.UpdateDefaultUpdateAt()
		aruo.mutation.SetUpdateAt(v)
	}
}

func (aruo *ApplyRecordUpdateOne) sqlSave(ctx context.Context) (_node *ApplyRecord, err error) {
	_spec := sqlgraph.NewUpdateSpec(applyrecord.Table, applyrecord.Columns, sqlgraph.NewFieldSpec(applyrecord.FieldID, field.TypeInt))
	id, ok := aruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ApplyRecord.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := aruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, applyrecord.FieldID)
		for _, f := range fields {
			if !applyrecord.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != applyrecord.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := aruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aruo.mutation.Detail(); ok {
		_spec.SetField(applyrecord.FieldDetail, field.TypeString, value)
	}
	if aruo.mutation.DetailCleared() {
		_spec.ClearField(applyrecord.FieldDetail, field.TypeString)
	}
	if value, ok := aruo.mutation.CurriculumVitae(); ok {
		_spec.SetField(applyrecord.FieldCurriculumVitae, field.TypeString, value)
	}
	if aruo.mutation.CurriculumVitaeCleared() {
		_spec.ClearField(applyrecord.FieldCurriculumVitae, field.TypeString)
	}
	if value, ok := aruo.mutation.Works(); ok {
		_spec.SetField(applyrecord.FieldWorks, field.TypeString, value)
	}
	if aruo.mutation.WorksCleared() {
		_spec.ClearField(applyrecord.FieldWorks, field.TypeString)
	}
	if value, ok := aruo.mutation.Skills(); ok {
		_spec.SetField(applyrecord.FieldSkills, field.TypeString, value)
	}
	if aruo.mutation.SkillsCleared() {
		_spec.ClearField(applyrecord.FieldSkills, field.TypeString)
	}
	if value, ok := aruo.mutation.Name(); ok {
		_spec.SetField(applyrecord.FieldName, field.TypeString, value)
	}
	if value, ok := aruo.mutation.Level(); ok {
		_spec.SetField(applyrecord.FieldLevel, field.TypeInt, value)
	}
	if value, ok := aruo.mutation.AddedLevel(); ok {
		_spec.AddField(applyrecord.FieldLevel, field.TypeInt, value)
	}
	if value, ok := aruo.mutation.Avatar(); ok {
		_spec.SetField(applyrecord.FieldAvatar, field.TypeString, value)
	}
	if aruo.mutation.AvatarCleared() {
		_spec.ClearField(applyrecord.FieldAvatar, field.TypeString)
	}
	if value, ok := aruo.mutation.CreateAt(); ok {
		_spec.SetField(applyrecord.FieldCreateAt, field.TypeTime, value)
	}
	if value, ok := aruo.mutation.UpdateAt(); ok {
		_spec.SetField(applyrecord.FieldUpdateAt, field.TypeTime, value)
	}
	if value, ok := aruo.mutation.IsPassed(); ok {
		_spec.SetField(applyrecord.FieldIsPassed, field.TypeInt8, value)
	}
	if value, ok := aruo.mutation.AddedIsPassed(); ok {
		_spec.AddField(applyrecord.FieldIsPassed, field.TypeInt8, value)
	}
	if value, ok := aruo.mutation.Messages(); ok {
		_spec.SetField(applyrecord.FieldMessages, field.TypeString, value)
	}
	if aruo.mutation.MessagesCleared() {
		_spec.ClearField(applyrecord.FieldMessages, field.TypeString)
	}
	if value, ok := aruo.mutation.AuditorID(); ok {
		_spec.SetField(applyrecord.FieldAuditorID, field.TypeInt, value)
	}
	if value, ok := aruo.mutation.AddedAuditorID(); ok {
		_spec.AddField(applyrecord.FieldAuditorID, field.TypeInt, value)
	}
	if aruo.mutation.AuditorIDCleared() {
		_spec.ClearField(applyrecord.FieldAuditorID, field.TypeInt)
	}
	if aruo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   applyrecord.UserTable,
			Columns: []string{applyrecord.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aruo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   applyrecord.UserTable,
			Columns: []string{applyrecord.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ApplyRecord{config: aruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{applyrecord.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	aruo.mutation.done = true
	return _node, nil
}
